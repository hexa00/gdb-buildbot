# -*- python -*-
# ex: set syntax=python:


## TODO:
##
## - Add comments on every function/class
## - License stuff (on all files)
## - Cross testing (needed?)
## - Improve way to store and compare testcases


from buildbot.schedulers.basic import SingleBranchScheduler, AnyBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.process import factory
from buildbot.process.properties import WithProperties
from buildbot.steps.shell import Compile
from buildbot.steps.shell import Configure
from buildbot.steps.shell import ShellCommand
from buildbot.steps.shell import SetPropertyFromCommand
from buildbot.steps.transfer import FileUpload
from buildbot.steps.source.git import Git
from buildbot.steps.source.gerrit import Gerrit
from buildbot.steps.slave import RemoveDirectory
from buildbot.changes.filter import ChangeFilter
from buildbot.changes.gerritchangesource import GerritChangeFilter
from buildbot.changes.gerritchangesource import GerritChangeSource
from buildbot.buildslave import BuildSlave
from buildbot.status.results import SUCCESS, WARNINGS, FAILURE, EXCEPTION
from buildbot import config
from gdbcommand import CopyOldGDBSumFile, GdbCatSumfileCommand
from gdbgitdb import SaveGDBResults, get_builder_commit_id
from urllib import quote

from sumfiles import DejaResults, set_web_base
import os
import urllib
from json import load
import re

####################################
####################################
#### GDB BuildBot Configuration ####
####################################
####################################

###############################
#### General Configuration ####
###############################

# This is the dictionary that the buildmaster pays attention to. We
# also use a shorter alias to save typing.
c = BuildmasterConfig = {}

# Base directory for the web server.  This is needed in order to
# compare the test results.
gdb_web_base = os.path.expanduser (os.path.join (basedir,
                                                 'public_html',
                                                 'results'))
set_web_base (gdb_web_base)

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
c['protocols'] = {'pb': {'port': 9989}}

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

# RE representing which branches to track on the GDB repository
branches_to_watch = re.compile ("(refs/heads/)?(.*)")

gerrit_user = os.getenv('GERRIT_USER')
if len(gerrit_user) == 0:
    config.error('Undefined GERRIT_USER')

gerrit_server = 'gerrit.ericsson.se'
gerrit_project_name = 'toside/binutils-gdb'
main_repo_url = 'ssh://{}@{}:29418/{}'.format(gerrit_user,
                                              gerrit_server,
                                              gerrit_project_name)

# Function which decides whether BRANCH should be used or not
def should_watch_branch (branch):
    if re.match (branches_to_watch, branch):
        return True
    else:
        return False

#from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []
#c['change_source'].append(GitPoller(
#        repourl = main_repo_url,
#	workdir = os.path.expanduser (os.path.join ('~/', 'buildbot-master-binutils-gdb')),
#	branches = should_watch_branch,
#	pollinterval = 30))

class FilteringGerritChangeSource(GerritChangeSource):
    def eventReceived_patchset_created(self, properties, event):
        if event['change']['project'] == 'toside/binutils-gdb':
            self.addChangeFromEvent(properties, event)

c['change_source'].append(
    FilteringGerritChangeSource(gerrit_server,
                                gerrit_user,
                                handled_events=("patchset-created",)))

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("gdb","gdb")]),
    gracefulShutdown = False,
    forceBuild = auth, # use this to test your slave once it is set up
    forceAllBuilds = auth,  # ..or this
    pingBuilder = auth,
    stopBuild = True,
    stopAllBuilds = True,
    cancelPendingBuild = True,
)

c['status'].append (html.WebStatus (http_port = 8010, authz = authz_cfg))


def make_breakage_lockfile_name (builder):
    return "/tmp/gdb-buildbot-breakage-report-%s.lock" % builder

c['title'] = "GDB Toside"
c['titleURL'] = "http://localhost:8010"

c['buildbotURL'] = "http://localhost:8010"

c['db'] = {
    'db_url' : "sqlite:///data/state.sqlite",
}

#####################
#### Build steps ####
#####################

## This is where we define our build steps.  A build step is some
## command/action that buildbot will perform while building GDB.  See
## the documentation on each build step class to understand what it
## does.

class CloneOrUpdateGDBMasterRepo (Gerrit):
    """This build step updates the so-called "master" git repository.  For
each buildslave, we have one master GDB git repository, which is then
used to create each builder's GDB git repository.  In other words,
each builder inside a buildslave will have something like:

    -- master GDB git repo
      |
      |---- builder X
          |
          |-- GDB git repo (clone from the master above)
      |
      |----- builder Y
          |
          |-- GDB git repo (clone from the master above)

and so on.  This layout helps us to save some when fetching changes
from the principal repository."""
    name = "update gdb master repo"
    description = r"fetching GDB master sources"
    descriptionDone = r"fetched GDB master sources"
    def __init__ (self):
        Git.__init__ (self,
                      repourl = main_repo_url,
                      workdir = WithProperties (r"%s/../binutils-gdb-master/",
                                                r'builddir'),
                      retryFetch = True,
                      mode = r'incremental',
                      progress = True)
        self.haltOnFailure = False
        self.flunkOnFailure = False

class CloneOrUpdateGDBRepo (Gerrit):
    """This build step is used to clone the GDB git repository that will
be used by an specific builder (inside a buildslave).  The trick here
is to use the "reference" parameter to initialize the class, which
makes BuildBot clone the git repository mostly using the objects
present at the reference repository (i.e., locally)."""
    name = "clone gdb repo"
    description = "fetching GDB sources"
    descriptionDone = "fetched GDB sources"
    def __init__ (self):
        Git.__init__ (self,
                      repourl = main_repo_url,
                      workdir = WithProperties ('%s/binutils-gdb/', 'builddir'),
                      reference = WithProperties ("%s/../binutils-gdb-master/",
                                                  'builddir'),
                      retryFetch = True,
                      progress = True,
                      mode='full')

class ConfigureGDB (Configure):
    """This build step runs the GDB "configure" command, providing extra
flags for it if needed."""
    name = "configure gdb"
    description = r"configure GDB"
    descriptionDone = r"configured GDB"
    def __init__ (self, extra_conf_flags, **kwargs):
        Configure.__init__ (self, **kwargs)
        self.workdir = WithProperties (r"%s", r'builddir')
        self.command = ['../binutils-gdb/configure',
                        '--disable-binutils',
                        '--disable-ld',
                        '--disable-gold',
                        '--disable-gas',
                        '--disable-sim',
                        '--disable-gprof'] + extra_conf_flags

class CompileGDB (Compile):
    """This build step runs "make" to compile the GDB sources.  It
provides extra "make" flags to "make" if needed.  It also uses the
"jobs" properties to figure out how many parallel jobs we can use when
compiling GDB; this is the "-j" flag for "make".  The value of the
"jobs" property is set at the "config.json" file, for each
buildslave."""
    name = "compile gdb"
    description = r"compile GDB"
    descriptionDone = r"compiled GDB"
    def __init__ (self, make_command = 'make', extra_make_flags = [],
                  **kwargs):
        Compile.__init__ (self, **kwargs)
        self.workdir = WithProperties (r"%s", r'builddir')
        self.command = ['%s' % make_command,
                        WithProperties (r"-j%s", r'jobs'),
                        'all'] + extra_make_flags
        self.timeout = 14400

class MakeTAGSGDB (ShellCommand):
    name = 'make tags'
    description = 'running make TAGS'
    descriptionDone = 'ran make TAGS'
    def __init__ (self, **kwargs):
        ShellCommand.__init__ (self, make_command = 'make',
                               **kwargs)
        self.workdir = WithProperties ("%s/build/gdb", 'builddir')
        self.command = [ '%s' % make_command, 'TAGS' ]
        # We do not want to stop testing when this command fails.
        self.haltOnFailure = False
        self.flunkOnFailure = False
        self.flunkOnWarnings = False

class TestGDB (ShellCommand):
    """This build step runs the full testsuite for GDB.  It can run in
parallel mode (see BuildAndTestGDBFactory below), and it will also
provide any extra flags for "make" if needed.  Unfortunately, because
our testsuite is not perfect (yet), this command must not make
BuildBot halt on failure."""
    name = "test gdb"
    description = r"testing GDB"
    descriptionDone = r"tested GDB"
    def __init__ (self, make_command = 'make', extra_make_check_flags = [],
                  test_env = {}, **kwargs):
        ShellCommand.__init__ (self, decodeRC = { 0 : SUCCESS,
                                                  1 : SUCCESS,
                                                  2 : SUCCESS },
                               **kwargs)

        self.workdir = WithProperties (r"%s/build/gdb/testsuite", r'builddir')
        self.command = ['%s' % make_command,
                        '-k',
                        'check'] + extra_make_check_flags

        self.env = test_env
        # Needed because of dejagnu
        self.haltOnFailure = False
        self.flunkOnFailure = False
        self.flunkOnWarnings = False
        self.timeout = 14400

#######################
#### Build Factory ####
#######################

## This is where our Build Factory is defined.  A build factory is a
## description of the build process, which is made in terms of build
## steps.  The BuildAndTestGDBFactory is the main build factory for
## GDB; it is configurable and should be more than enough to describe
## most builds.

class BuildAndTestGDBFactory (factory.BuildFactory):
    """This is the main build factory for the GDB project.  It was made to
be very configurable, and should be enough to describe most builds.
The parameters of the class are:

    - ConfigureClass: set this to be the class (i.e., build step) that
      will be called to configure GDB.  It needs to accept the same
      arguments as the ConfigureGDB class above.  The default is to
      use ConfigureGDB.

    - CompileClass: set this to be the class (i.e., build step) that
      will be called to compile GDB.  It needs to accept the same
      arguments as the CompileGDB class above.  The default is to use
      CompileGDB.

    - TestClass: set this to be the class (i.e., build step) that will
      be called to test GDB.  It needs to accept the same arguments as
      the TestGDB class above.  The default is to use TestGDB.

    - extra_conf_flags: extra flags to be passed to "configure".
      Should be a list (i.e., []).  The default is None.

    - enable_targets_all: set this to True to pass
      '--enable-targets=all' to configure.  The default is True.

    - extra_make_flags: extra flags to be passed to "make", when
      compiling.  Should be a list (i.e., []).  The default is None.

    - extra_make_check_flags: extra flags to be passed to "make
      check", when testing.  Should be a list (i.e., []).  The default
      is None.

    - test_env: extra environment variables to be passed to "make
      check", when testing.  Should be a dictionary (i.e., {}).  The
      default is None.

    - test_parallel: set to True if the test shall be parallelized.
      Default is False.  Beware that parallelizing tests may cause
      some failures due to limited system resources.

    - make_command: set the command that will be called when running
      'make'.  This is needed because BSD systems need to run 'gmake'
      instead of make.  Default is 'make'.

    - use_system_debuginfo: set to False if GDB should be compiled
      with the "--with-separate-debug-dir" option set to
      "/usr/lib/debug".  Default is True.

    """
    ConfigureClass = ConfigureGDB
    CompileClass = CompileGDB
    TestClass = TestGDB

    # Set this to False to skip the test
    run_testsuite = True

    extra_conf_flags = None
    enable_targets_all = True

    extra_make_flags = None
    extra_make_check_flags = None
    test_env = None

    # Set this to false to disable parallel testing (i.e., do not use
    # FORCE_PARALLEL)
    test_parallel = False

    # Set this to the make command that you want to run in the "make"
    # steps.
    make_command = 'make'

    # Set this to False to disable using system's debuginfo files
    # (i.e., do not use '--with-separate-debug-dir')
    use_system_debuginfo = True

    def __init__ (self, architecture_triplet = []):
        factory.BuildFactory.__init__ (self)

        self.architecture_triplet = architecture_triplet

        self.addStep (RemoveDirectory (dir = WithProperties (r"%s/build",
                                                             r'builddir'),
                                       description = r"removing old build dir",
                                       descriptionDone = r"removed old build dir"))
        self.addStep (CloneOrUpdateGDBMasterRepo ())
        self.addStep (CloneOrUpdateGDBRepo ())

        if self.run_testsuite:
            self.addStep (CopyOldGDBSumFile ())

        if not self.extra_conf_flags:
            self.extra_conf_flags = []

        if self.enable_targets_all:
            self.extra_conf_flags.append (r'--enable-targets=all')

        if self.use_system_debuginfo:
            self.extra_conf_flags.append (r'--with-separate-debug-dir=/usr/lib/debug')

        self.addStep (self.ConfigureClass (self.extra_conf_flags + architecture_triplet))

        if not self.extra_make_flags:
            self.extra_make_flags = []
        self.addStep (self.CompileClass (self.make_command, self.extra_make_flags))

        # Disabling this until we figure out how to properly run + test
#        self.addStep (MakeTAGSGDB ())

        if not self.extra_make_check_flags:
            self.extra_make_check_flags = []

        if self.run_testsuite:
            if not self.test_env:
                self.test_env = {}

            if self.test_parallel:
                self.extra_make_check_flags.append (WithProperties (r"-j%s", r'jobs'))
                self.extra_make_check_flags.append (r'FORCE_PARALLEL=1')

            self.addStep (self.TestClass (self.make_command, self.extra_make_check_flags,
                                          self.test_env))

            self.addStep (GdbCatSumfileCommand (workdir = WithProperties (r'%s/build/gdb/testsuite',
                                                                          r'builddir'),
                                                description = r'analyze test results'))
            self.addStep (FileUpload (slavesrc = WithProperties (r"%s/build/gdb/testsuite/gdb.log",
                                                                 r'builddir'),
                                      masterdest = WithProperties (r"public_html/results/%s/gdb.log",
                                                                   r'buildername')))
            self.addStep (SaveGDBResults ())


##################
#### Builders ####
##################

## This section describes our builders.  The builders are instances of
## a build factory, and they will be used to do a specific build of
## the project.
##
## The nomenclature here is important.  Every builder should start
## with the prefix "RunTestGDB", and then be followed by the testing
## scenario that the build will test, followed by "_cXXtYY", where XX
## is the bitness of the compilation, and YY is the bitness of the
## testing.  So, for example, if we are specifically testing GDB
## running the native-gdbserver tests, compiling GDB on a 64-bit
## machine, but running the tests in 32-bit mode, our builder would be called:
##
##     RunTestGDBNativeGDBServer_c64t32

class RunTestGDBPlain_c64t64 (BuildAndTestGDBFactory):
    """Compiling for 64-bit, testing on 64-bit."""
    def __init__ (self, **kwargs):
        BuildAndTestGDBFactory.__init__ (self, **kwargs)

class RunTestGDBPlain_c32t32 (BuildAndTestGDBFactory):
    """Compiling on 32-bit, testing on 32-bit."""
    def __init__ (self, **kwargs):
        self.extra_conf_flags = [ r'CFLAGS=-m32' ]
        self.extra_make_check_flags = [ r'RUNTESTFLAGS=--target_board unix/-m32' ]
        BuildAndTestGDBFactory.__init__ (self, **kwargs)

class RunTestGDBm32_c64t32 (BuildAndTestGDBFactory):
    """Compiling on 64-bit, testing on 32-bit."""
    def __init__ (self, **kwargs):
        self.extra_make_check_flags = [ r'RUNTESTFLAGS=--target_board unix/-m32' ]
        BuildAndTestGDBFactory.__init__ (self, **kwargs)

class RunTestGDBNativeGDBServer_c64t64 (BuildAndTestGDBFactory):
    """Compiling on 64-bit, testing native-gdbserver on 64-bit."""
    def __init__ (self, **kwargs):
        self.extra_make_check_flags = [ r'RUNTESTFLAGS=--target_board native-gdbserver' ]
        BuildAndTestGDBFactory.__init__ (self, **kwargs)

class RunTestGDBNativeGDBServer_arm (BuildAndTestGDBFactory):
    """Compiling on 64-bit, testing native-gdbserver on 64-bit."""
    def __init__ (self, **kwargs):
        self.extra_make_check_flags = [ r'RUNTESTFLAGS=--target_board native-gdbserver/-marm' ]
        BuildAndTestGDBFactory.__init__ (self, **kwargs)

class RunTestGDBNativeGDBServer_thumb (BuildAndTestGDBFactory):
    """Compiling on 64-bit, testing native-gdbserver on 64-bit."""
    def __init__ (self, **kwargs):
        self.extra_make_check_flags = [ r'RUNTESTFLAGS=--target_board native-gdbserver/-mthumb' ]
        BuildAndTestGDBFactory.__init__ (self, **kwargs)

class RunTestGDBNativeGDBServer_thumbv1 (BuildAndTestGDBFactory):
    """Compiling on 64-bit, testing native-gdbserver on 64-bit."""
    def __init__ (self, **kwargs):
        self.extra_make_check_flags = [ r'RUNTESTFLAGS=--target_board native-gdbserver/-marmv4t' ]
        BuildAndTestGDBFactory.__init__ (self, **kwargs)

class RunTestGDBNativeGDBServer_c64t32 (BuildAndTestGDBFactory):
    """Compiling on 64-bit, testing native-gdbserver on 32-bit."""
    def __init__ (self, **kwargs):
        self.extra_make_check_flags = [ r'RUNTESTFLAGS=--target_board native-gdbserver/-m32' ]
        BuildAndTestGDBFactory.__init__ (self, **kwargs)

class RunTestGDBNativeGDBServer_c32t32 (BuildAndTestGDBFactory):
    """Compiling on 32-bit, testing native-gdbserver on 32-bit."""
    def __init__ (self, **kwargs):
        self.extra_conf_flags = [ 'CFLAGS=-m32']
        self.extra_make_check_flags = [ 'RUNTESTFLAGS=--target_board native-gdbserver/-m32']
        BuildAndTestGDBFactory.__init__ (self, **kwargs)

class RunTestGDBNativeExtendedGDBServer_c64t64 (BuildAndTestGDBFactory):
    """Compiling on 64-bit, testing native-extended-gdbserver on 64-bit."""
    def __init__ (self, **kwargs):
        self.extra_make_check_flags = [ r'RUNTESTFLAGS=--target_board native-extended-gdbserver' ]
        BuildAndTestGDBFactory.__init__ (self, **kwargs)

class RunTestGDBNativeExtendedGDBServer_c64t32 (BuildAndTestGDBFactory):
    """Compiling on 64-bit, testing native-extended-gdbserver on 32-bit."""
    def __init__ (self, **kwargs):
        self.extra_make_check_flags = [ r'RUNTESTFLAGS=--target_board native-extended-gdbserver/-m32' ]
        BuildAndTestGDBFactory.__init__ (self, **kwargs)

class RunTestGDBNativeExtendedGDBServer_c32t32 (BuildAndTestGDBFactory):
    """Compiling on 64-bit, testing native-extended-gdbserver on 32-bit."""
    def __init__ (self, **kwargs):
        self.extra_conf_flags = [ 'CFLAGS=-m32']
        self.extra_make_check_flags = [ r'RUNTESTFLAGS=--target_board native-extended-gdbserver/-m32' ]
        BuildAndTestGDBFactory.__init__ (self, **kwargs)

class RunTestGDBIndexBuild (BuildAndTestGDBFactory):
    """Testing with the "cc-with-tweaks.sh" passing -i."""
    def __init__ (self, **kwargs):
        self.extra_make_check_flags = [ WithProperties (r'CC_FOR_TARGET=/bin/sh %s/binutils-gdb/gdb/contrib/cc-with-tweaks.sh -i gcc', r'builddir'),
                                        WithProperties (r'CXX_FOR_TARGET=/bin/sh %s/binutils-gdb/gdb/contrib/cc-with-tweaks.sh -i g++', r'builddir') ]
        BuildAndTestGDBFactory.__init__ (self, **kwargs)

class RunTestGDBIndexBuild_c32t32 (BuildAndTestGDBFactory):
    """Testing with the "cc-with-tweaks.sh" passing -i.  32-bit version"""
    def __init__ (self, **kwargs):
        self.extra_conf_flags = [ 'CFLAGS=-m32' ]
        self.extra_make_check_flags = [ WithProperties (r'CC_FOR_TARGET=/bin/sh %s/binutils-gdb/gdb/contrib/cc-with-tweaks.sh -i gcc', r'builddir'),
                                        WithProperties (r'CXX_FOR_TARGET=/bin/sh %s/binutils-gdb/gdb/contrib/cc-with-tweaks.sh -i g++', r'builddir'),
                                        'RUNTESTFLAGS=--target_board unix/-m32' ]
        BuildAndTestGDBFactory.__init__ (self, **kwargs)

# Class for only building GDB, without testing

class RunTestGDBPlainBuildWithCxx_c64notest (BuildAndTestGDBFactory):
    """Compiling for 64-bit with --enable-build-with-cxx.  We do not test
anything for now."""
    def __init__ (self, **kwargs):
        self.extra_conf_flags = [ '--enable-build-with-cxx' ]
        self.run_testsuite = False
        BuildAndTestGDBFactory.__init__ (self, **kwargs)

# Classes needed for BSD systems

class RunTestGDBBSD_Common (BuildAndTestGDBFactory):
    """Common BSD test configurations"""
    def __init__ (self, **kwargs):
        self.extra_conf_flags = [ 'CFLAGS=-I/usr/local/include', '--disable-werror' ]
        self.make_command = 'gmake'
        BuildAndTestGDBFactory.__init__ (self, **kwargs)

class RunTestGDBPlainBSD_c64t64 (RunTestGDBPlain_c64t64, RunTestGDBBSD_Common):
    """Compiling for 64-bit, testing on 64-bit."""
    pass

class RunTestGDBIndexBuildBSD (RunTestGDBIndexBuild, RunTestGDBBSD_Common):
    """Testing with the "cc-with-tweaks.sh" passing -i.  FIXME: include bitness here."""
    pass

# Classes needed for AIX systems

class RunTestGDBAIX_Common (BuildAndTestGDBFactory):
    """Common AIX test configurations"""
    def __init__ (self, **kwargs):
        # Unfortunately we have to disable -Werror there...
        self.extra_conf_flags = [ '--disable-werror' ]
        self.enable_targets_all = False
        self.make_command = 'gmake'
        self.extra_make_flags = [ 'MAKEINFO=true' ]
        BuildAndTestGDBFactory.__init__ (self, **kwargs)

class RunTestGDBPlainAIX (RunTestGDBAIX_Common, RunTestGDBPlain_c64t64):
    """Compiling for AIX"""
    pass

class RunTestGDBARM (BuildAndTestGDBFactory):
    """Compiling on arm"""
    def __init__ (self, **kwargs):
        BuildAndTestGDBFactory.__init__ (self, **kwargs)

# All branches that are going to be watched.
#all_gdb_filter = ChangeFilter (branch_fn = should_watch_branch)

toside_gdb_gerrit_filter = GerritChangeFilter(project='toside/binutils-gdb')

# This function prevents a builder to build more than one build at the
# same time.  This is needed because we do not have a way to lock the
# git repository containing the test results of the builder, so
# simultaneous builds can cause a mess when committing the test
# results.
def DefaultGDBCanStartBuild (builder, buildslave, buildrequest):
    return not builder.building

files_ignored_re = re.compile ("(binutils/|cpu/|elfcpp/|gas/|gold/|gprof/|ld/|texinfo/|gdb/doc/).*")

def DefaultGDBfileIsImportant (change):
    """Implementation of fileIsImportant method, in order to decide which
changes to build on GDB."""
    only_changelog = True

    # Do not build the 'GDB Administrator' commits, that are used to
    # increment the date on some files.
    if 'GDB Administrator' in change.who:
        return False

    # Filter out commits that only modify the ChangeLog files.
    for filename in change.files:
        if 'ChangeLog' not in filename:
            only_changelog = False
            break

    if only_changelog:
        return False

    for filename in change.files:
        if not re.match (files_ignored_re, filename):
            return True

    return False

###############################
#### Configuration loading ####
###############################

## This is "the heart" of this file.  This function is responsible for
## loading the configuration present in the "lib/config.json" file,
## and initializing everything needed for BuildBot to work.  Most of
## this function was copied from WebKit's BuildBot configuration, with
## lots of tweaks.

def load_config (c):
    config = load (open ("lib/config.json"))
    passwd = load (open ("lib/passwords.json"))

    c['slaves'] = [BuildSlave (slave['name'], passwd[slave['name']],
                               max_builds = 1,
                               notify_on_missing = [ str (slave['admin']) ],
                               missing_timeout = 300,
                               properties = { 'jobs' : slave['jobs'] })
                   for slave in config['slaves']]

    c['schedulers'] = []
    for s in config['schedulers']:
        if "change_filter" in s:
            s['change_filter'] = globals ()[s['change_filter']]
        s['treeStableTimer'] = None
        s['fileIsImportant'] = DefaultGDBfileIsImportant
        kls = globals ()[s.pop ('type')]
        s = dict (map (lambda key_value_pair : (str (key_value_pair[0]),
                                                key_value_pair[1]),
                       s.items ()))
        c['schedulers'].append (kls (**s))

    c['schedulers'].append(ForceScheduler(
        name="force-ubuntu",
        builderNames=["Ubuntu-1404-x86",
         "Ubuntu-1404-x86-native-gdbserver",
         "Ubuntu-1404-x86-extended-gdbserver"]))

    c['schedulers'].append(ForceScheduler(
        name="force-arm",
        builderNames=["Debian-jessie-ARMv7",
         "Debian-jessie-ARMv7-native-gdbserver",
         "Debian-jessie-ARMv7-native-extended-gdbserver"]))

    c['builders'] = []
    for b in config['builders']:
        myenv = {}
        if 'arch_triplet' in b:
            architecture_triplet = [ b.pop ('arch_triplet') ]
        else:
            architecture_triplet = []
        btype = b.pop ('type')
        factory = globals ()[ "RunTestGDB%s" % btype ]
        b['factory'] = factory (architecture_triplet = architecture_triplet)
        b['canStartBuild'] = DefaultGDBCanStartBuild
        b['mergeRequests'] = False

        # AIX hack.  Sigh...
        try:
            mypath = b.pop ('PATH')
            myenv['PATH'] = mypath
            b['env'] = myenv
        except KeyError:
            pass

        c['builders'].append (b)

load_config (c)
